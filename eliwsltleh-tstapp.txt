import os ,unittest ,json
from flask_sqlalchemy import SQLAlchemy
# from sqlalchemy import Column, String, Integer, create_engine ,DateTime 
from app import create_app
from models import setup_db, Actor ,Movie


class TriviaTestCase(unittest.TestCase):

    """This class represents the trivia test case"""

    def setUp(self):

        """Define test variables and initialize app."""
        self.app = create_app()
        self.client = self.app.test_client
        self.database_name = "castingagency"
        self.database_path = "postgresql://postgres:1234@localhost:5432/castingagency"
        setup_db(self.app)
        # binds the app to the current context
        with self.app.app_context():

            self.db = SQLAlchemy()
            self.db.init_app(self.app)
            # create all tables
            self.db.create_all()
            #give the attribuites of the class any values
            self.new_actor={"name" : "Nada" , "age" : 20 , "gender" : "Female" }
            self.new_movie={ 
                'id' :2,
                'title':'aihaga' ,
                'release_date' : "5-7-1998"
                }
    
          
    def tearDown(self):
        """Executed after reach test"""
        pass

    """
    TODO
    Write at least one test for each test for successful operation and for expected errors.
    """
    def test_get_all_actors(self):

    
        res=self.client().get('/actors')
        data=json.loads(res.data)
        self.assertEqual(res.status_code,200)
        self.assertEqual(data['success'],True)
        self.assertTrue(len(data['Actors']))


    def test_get_all_movies(self):
        res=self.client().get('/movies')
        data=json.loads(res.data)
        self.assertEqual(res.status_code,200)
        self.assertEqual(data['success'],True)
        self.assertTrue(data['Movies'])



    # def test_delete_actor(self):

    #     res=self.client().delete('/actors/11')
        
    #     data=json.loads(res.data)
    #     self.assertEqual(res.status_code,200)
    #     self.assertEqual(data['success'],True)
        

    # def test_422_delete_actor_failure(self):

    #     res=self.client().delete('/actors/99')
    #     data=json.loads(res.data)
    #     self.assertEqual(res.status_code,422)
    #     self.assertEqual(data['success'],False)
    #     # self.assertEqual(data['message'] ,'Not found')
   
    
    
    # def test_delete_movie(self):
    #     res=self.client().delete('/movies/3')
    #     data=json.loads(res.data)
    #     self.assertEqual(res.status_code,200)
    #     self.assertEqual(data['success'],True)
   

    # def test_delete_movie_failure(self):

    #     res=self.client().get('/actors/99999')
    #     data=json.loads(res.data)
    #     self.assertEqual(res.status_code,422)
    #     self.assertEqual(data['success'],False)
    #     self.assertEqual(data['message'] ,'unprocessable')

    def test_post_actor(self):
        
        # actor_before_add = len(Actor.query.all())
      
      
        response = self.client().post('/actors' , json=self.new_actor)
        data=json.loads(response.data)
        # actor_after_add = len(Actor.query.all())
        self.assertEqual(response.status_code,200)
        self.assertEqual(data['success'],True)
        # self.assertTrue(actor_before_add + 1  ==  actor_after_add  )

    def test_422_add_actor(self):
  
        response = self.client().post('/actors' , json={ })
        data=json.loads(response.data)
        self.assertEqual(response.status_code,422)
        self.assertEqual(data['success'] , False)
        # self.assertEqual(data['message'] ,'Unprocessable Entity')

    # def test_post_movie(self):
    #     movie_before_add = len(Movie.query.all())
    #     response = self.client().post('/movies' , json=self.new_movie)
    #     data=json.loads(response.data)
    #     movie_after_add=len(Movie.query.all())
    #     self.assertEqual(response.status_code,200)
    #     self.assertEqual(data['success'],True)
    #     self.assertTrue(movie_before_add - movie_after_add == 1)

    # def test_failure_add_movie(self):
    #     response = self.client().post('/movies' , json={})
    #     data=json.loads(response.data)
    #     self.assertEqual(response.status_code,422)
    #     self.assertEqual(data['success'], False)
    #     self.assertEqual(data['message'] ,'unprocessable')

    # def test_edit_actorss(self):
    #     new_actor={
    #         "name":"Arwaaaaaaaaaa"
    #         }
    #     response = self.client().post('/actors/1' , json=self.new_actor)

    #     self.assertEqual(response.status_code,200)
    #     self.assertEqual(data['success'],True)

    # def test_failure_edit_actorss(self):
    #     #Assume that patch fails when id is not found and we do not get a new body , mafish json asln myf34 23ml json={} keda de m3naha #3delha 5leha fadia
    #     response = self.client().post('/actors/99999' )
    #     self.assertEqual(response.status_code,404)
    #     self.assertEqual(data['success'],False)
    #     self.assertEqual(data['message'] ,'Resource is not found')

    # def test_edit_moviess(self):
    #     new_movie={
    #         "title":"CloudyFilm"
    #         }
    #     response = self.client().post('/movies/2' , json=self.new_movie)

    #     self.assertEqual(response.status_code,200)
    #     self.assertEqual(data['success'],True)

    # def test_failure_edit_moviess(self):
    #     #Assume that patch fails when id is not found and we do not get a new body , mafish json asln myf34 23ml json={} keda de m3naha #3delha 5leha fadia
    #     response = self.client().post('/movies/99999' )
    #     self.assertEqual(response.status_code,404)
    #     self.assertEqual(data['success'],False)

































import os
from flask import Flask, request, abort, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS

from models import setup_db, Actor, Movie 

db = SQLAlchemy()
def create_app(test_config=None):
  # create and configure the app
  app = Flask(__name__)
  CORS(app)
  setup_db(app)
  # db_drop_and_create_all()
  @app.after_request
  def after_request(response):
    response.headers.add('Access-Control-Allow-Headers','Content-Type,authorization,True')
    response.headers.add('Acess-Control-Allow-Methods' , 'GET,POST,PATCH,DELETE,OPTIONS')
    return response
  # db_drop_and_create_all()
  @app.route('/actors')
  def get_all_actors():
    Actors = Actor.query.all()
    Actors = [actor.format() for actor in Actors]
    # a = []
    # for actor in Actors: #actors = [actor-1, actor-2, actor-3]
    #   a.append(actor.formate())
    # Actors = a
    return jsonify ({
      "success" : True,
      "Actors" : Actors
    }),200

  @app.route('/movies')
  def get_all_movies():
    movies= Movie.query.all()
    movies = [ movie.format() for movie in movies]
    return jsonify ({
      "success" : True , 
      "Movies" : movies
    }),200

  @app.route('/actors/<int:actor_id>',methods=['DELETE'])
  def delete_actor(actor_id):

    try:
      x = Actor.query.filter(Actor.id == actor_id).one_or_none()
      # print(x)
      # print(x.format())
      if x is None:
        abort(404)
      x.delete()
      # print(x)
      # print(x.format())
      return jsonify ({
        'success' : True,
        'actor_id' : actor_id
      }),200
    except:
      # db.session.rollback()
      abort(422)
    # finally:
      # db.session.close()

  @app.route('/movies/<int:id>',methods=['DELETE'])
  def delete_movie(id):
    try:
      x=Movie.query.filter(Movie.id == id).one_or_none()
      if x is None:
        abort(404)
    
      x.delete()
      
      return jsonify ({
        "success" : True,
        "id" : id
      }),200
    except:
      abort(422)

  
  @app.route('/actors' , methods=['POST'])
  def  post_actor():
    try:

      #fetch the body data from the request body 
      body = request.get_json()
      requested_name = body.get('name')
      requested_age = body.get('age')
      requested_gender = body.get('gender')
      if  requested_name  is None:
        abort(422)
      #add the new data to the table as a new record
      new_actor = Actor(name=requested_name,age=requested_age,gender=requested_gender)
      new_actor.insert()
      if body is None:
        abort(422)
      return jsonify ({
        "success" : True,
        "id" : new_actor.id
      }),200
    except:
      abort(422)


  @app.route('/movies' , methods=['POST'])
  def  post_movie():

    #fetch the body data from the request body 

    body = request.get_json()
    requested_title = body.get('title')
    requested_release_date = body.get('release_date')
    requested_actor_id = body.get('actor_id')
    #add the new data to the table as a new record
    new_movie = Movie(title=requested_title,release_date=requested_release_date,actor_id=requested_actor_id)
    new_movie.insert()
    if body is None:
      abort(422)
    return jsonify ({
      "success" : True,
      "movies" : new_movie.id
    }),200


  @app.route('/actors/<int:id>' , methods =['PATCH'])
  def edit_actors(id):
    #fetch the body data from the request body 
    body = request.get_json()
    requested_name = body.get('name')
    requested_age = body.get('age')
    requested_gender = body.get('gender')
    #add the new data to the table as a new record
    to_be_updated_row = Actor.query.filter(Actor.id == id).one_or_none() #See if we have that id is in our Table ?
    if  to_be_updated_row  is None:
      abort(404) #id   is Not found , we do not have that record in our table
    if ( requested_name or  requested_age or requested_gender ) is None:
      abort(400) # Wrong Input
    to_be_updated_row.name = requested_name
    to_be_updated_row.age = requested_age
    to_be_updated_row.gender = requested_gender
    try:
      to_be_updated_row.update()
    except:
      abort(422)
    actors = Actor.query.filter(Actor.id == id).one_or_none()
    if actors is None:
      abort(404) #The Record is not found
    return jsonify ({
      "success" : True,
      "Actor" : to_be_updated_row.id
    }),200



  @app.route('/movies/<int:id>' , methods =['PATCH'])
  def edit_movies(id):
    #fetch the body data from the request body 
    body = request.get_json()
    requested_title_n = body.get('title')
    requested_release_date_n = body.get('release_date')
    
    #add the new data to the table as a new record
    to_be_updated_row_n=Movie.query.filter(Movie.id == id).one_or_none() #See if we have that id is in our Table ?
    if  to_be_updated_row_n is None:
      abort(404) #id   is Not found , we do not have that record in our table
    if ( requested_title_n or  requested_release_date_n  ) is None:
      abort(400) # Wrong Input
    to_be_updated_row_n.title=requested_title_n
    to_be_updated_row_n.release_date=requested_release_date_n
    # to_be_updated_row_n.actor_id = requested_actor_id_n
    try:
      to_be_updated_row_n.update()
    except:
      abort(422)
    movieys = Movie.query.filter(Movie.id==id).one_or_none()
    if movieys is None:
      abort(404) #The Record is not found
    return jsonify ({
      "success" : True,
      "Movies" : to_be_updated_row_n.id
    }),200


  return app

APP = create_app()
# # # # print(APP)

if __name__ == '__main__':
    APP.run(debug=True)


   
# Make the tests conveniently executable
if __name__ == "__main__":
    unittest.main()